version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: chat-postgres
    environment:
      POSTGRES_DB: chatdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: chat-redis
    ports:
      - "6379:6379"
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: chat-auth-service
    environment:
      DB_HOST: postgres
      DB_NAME: chatdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: your-256-bit-secret-key-change-this-in-production-environment
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chat-network

  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: chat-user-service
    environment:
      DB_HOST: postgres
      DB_NAME: chatdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chat-network

  chat-service:
    build:
      context: ./backend/chat-service
      dockerfile: Dockerfile
    container_name: chat-chat-service
    environment:
      DB_HOST: postgres
      DB_NAME: chatdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chat-network

  gateway-service:
    build:
      context: ./backend/gateway-service
      dockerfile: Dockerfile
    container_name: chat-gateway-service
    environment:
      AUTH_SERVICE_HOST: auth-service
      USER_SERVICE_HOST: user-service
      CHAT_SERVICE_HOST: chat-service
      JWT_SECRET: your-256-bit-secret-key-change-this-in-production-environment
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - user-service
      - chat-service
    networks:
      - chat-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chat-frontend
    ports:
      - "5173:5173"
    depends_on:
      - gateway-service
    networks:
      - chat-network

networks:
  chat-network:
    driver: bridge

volumes:
  postgres_data:
